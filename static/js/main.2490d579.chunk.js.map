{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","user","name","email","className","href","TodoInfo","todo","title","completed","id","classNames","TodoList","todos","map","username","getUserById","usersFromServer","find","userId","App","useState","setTitle","visibleTodos","setVisibleTodos","selectedUser","setSelectedUser","isTitle","setIsTitle","isUserChose","setIsUserChose","action","method","onSubmit","event","preventDefault","trimedTitle","trim","newUser","newTodo","arrOfTodos","todosId","Math","max","findMaxId","htmlFor","type","placeholder","value","onChange","target","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2490d579.chunk.js","sourcesContent":["import { User } from '../../types/User';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { name, email } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    title,\n    user,\n    completed,\n  } = todo;\n\n  return (\n    <article\n      data-id={todo.id}\n      className={classNames('TodoInfo', {\n        'TodoInfo--completed': completed,\n      })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user && (\n        <UserInfo user={user} />\n      )}\n    </article>\n  );\n};\n","import { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => (\n      <TodoInfo todo={todo} key={todo.id} />\n    ))}\n  </section>\n);\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React, { ChangeEvent, FormEvent, useState } from 'react';\nimport './App.scss';\n\nimport { User } from './types/User';\nimport { Todo } from './types/Todo';\nimport { TodoList } from './components/TodoList';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nfunction getUserById(id: number): User | null {\n  const foundUser = usersFromServer.find(user => user.id === id);\n\n  return foundUser || null;\n}\n\nconst findMaxId = (arrOfTodos: Todo[]) => {\n  const todosId = arrOfTodos.map(todo => todo.id);\n\n  return Math.max(...todosId) + 1;\n};\n\nconst todos: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUserById(todo.userId),\n}));\n\nexport const App: React.FC = () => {\n  const [title, setTitle] = useState('');\n  const [visibleTodos, setVisibleTodos] = useState(todos);\n  const [selectedUser, setSelectedUser] = useState(0);\n  const [isTitle, setIsTitle] = useState(true);\n  const [isUserChose, setIsUserChose] = useState(true);\n\n  const handleTitle = (event: ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n    setIsTitle(true);\n  };\n\n  const handleUserSelect = (event: ChangeEvent<HTMLSelectElement>) => {\n    setSelectedUser(+event.target.value);\n    setIsUserChose(true);\n  };\n\n  const hendleFormSubmit = (event: FormEvent) => {\n    event.preventDefault();\n    const trimedTitle = title.trim();\n\n    if (!trimedTitle) {\n      setIsTitle(false);\n    }\n\n    if (!selectedUser) {\n      setIsUserChose(false);\n    }\n\n    if (trimedTitle && selectedUser) {\n      const newUser = getUserById(selectedUser);\n      const newTodoId = findMaxId(visibleTodos);\n\n      const newTodo: Todo = {\n        id: newTodoId,\n        title,\n        userId: selectedUser,\n        completed: false,\n        user: newUser,\n      };\n\n      setVisibleTodos([...visibleTodos, newTodo]);\n\n      setTitle('');\n      setSelectedUser(0);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={hendleFormSubmit}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"title\">Title: </label>\n          <input\n            id=\"title\"\n            type=\"text\"\n            data-cy=\"titleInput\"\n            placeholder=\"Enter a title\"\n            name=\"title\"\n            value={title}\n            onChange={handleTitle}\n          />\n          {!isTitle && (\n            <span className=\"error\">\n              Please enter a title\n            </span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"user\">User: </label>\n          <select\n            id=\"user\"\n            data-cy=\"userSelect\"\n            value={selectedUser}\n            onChange={handleUserSelect}\n          >\n            <option value={0} disabled>Choose a user</option>\n            {usersFromServer.map(user => (\n              <option\n                key={user.id}\n                value={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n          {!isUserChose && (\n            <span className=\"error\">\n              Please choose a user\n            </span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={visibleTodos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}