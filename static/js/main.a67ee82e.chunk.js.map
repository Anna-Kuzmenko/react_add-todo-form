{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","user","name","email","className","href","TodoInfo","todo","title","completed","id","classNames","TodoList","todos","map","username","userId","usersFromServer","find","App","useState","newTitle","setNewTitle","visibleTodos","setVisibleTodos","selectedUserName","setSelectedUserName","isTitle","setIsTitle","isUserChose","setIsUserChose","action","method","onSubmit","event","preventDefault","newUser","todosId","newTodo","Math","max","htmlFor","type","placeholder","value","onChange","target","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a67ee82e.chunk.js","sourcesContent":["import { User } from '../../types/User';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { name, email } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    title,\n    user,\n    completed,\n  } = todo;\n\n  return (\n    <article\n      data-id={todo.id}\n      className={classNames('TodoInfo', {\n        'TodoInfo--completed': completed,\n      })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user && (\n        <UserInfo user={user} />\n      )}\n    </article>\n  );\n};\n","import { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => (\n      <TodoInfo todo={todo} key={todo.id} />\n    ))}\n  </section>\n);\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React, { ChangeEvent, FormEvent, useState } from 'react';\nimport './App.scss';\n\nimport { User } from './types/User';\nimport { Todo } from './types/Todo';\nimport { TodoList } from './components/TodoList';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nfunction getUser(userId: number): User | null {\n  const foundUser = usersFromServer.find(user => user.id === userId);\n\n  return foundUser || null;\n}\n\nconst todos: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUser(todo.userId),\n}));\n\nexport const App: React.FC = () => {\n  const [newTitle, setNewTitle] = useState('');\n  const [visibleTodos, setVisibleTodos] = useState(todos);\n  const [selectedUserName, setSelectedUserName] = useState('');\n  const [isTitle, setIsTitle] = useState(true);\n  const [isUserChose, setIsUserChose] = useState(true);\n\n  const handleTitle = (event: ChangeEvent<HTMLInputElement>) => {\n    setNewTitle(event.target.value);\n    setIsTitle(true);\n  };\n\n  const handleUserNameLSelect = (event: ChangeEvent<HTMLSelectElement>) => {\n    setSelectedUserName(event.target.value);\n    setIsUserChose(true);\n  };\n\n  const hendleFormSubmit = (event: FormEvent) => {\n    event.preventDefault();\n\n    if (newTitle && selectedUserName) {\n      const newUser = usersFromServer\n        .find(user => user.name === selectedUserName) || null;\n\n      const todosId = visibleTodos.map(todo => todo.id);\n      const newTodoId = Math.max(...todosId) + 1;\n\n      const newTodo: Todo = {\n        id: newTodoId,\n        title: newTitle,\n        userId: newUser?.id || null,\n        completed: false,\n        user: newUser,\n      };\n\n      setVisibleTodos([...visibleTodos, newTodo]);\n\n      setNewTitle('');\n      setSelectedUserName('');\n    }\n\n    if (!newTitle) {\n      setIsTitle(false);\n    }\n\n    if (!selectedUserName) {\n      setIsUserChose(false);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={hendleFormSubmit}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"title\">Title: </label>\n          <input\n            id=\"title\"\n            type=\"text\"\n            data-cy=\"titleInput\"\n            placeholder=\"Enter a title\"\n            name=\"title\"\n            value={newTitle}\n            onChange={handleTitle}\n          />\n          {!isTitle && (\n            <span className=\"error\">\n              Please enter a title\n            </span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"user\">User: </label>\n          <select\n            id=\"user\"\n            data-cy=\"userSelect\"\n            value={selectedUserName}\n            onChange={handleUserNameLSelect}\n          >\n            <option value=\"\" disabled>Choose a user</option>\n            {usersFromServer.map(user => (\n              <option key={user.id}>{user.name}</option>\n            ))}\n          </select>\n          {!isUserChose && (\n            <span className=\"error\">\n              Please choose a user\n            </span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={visibleTodos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}